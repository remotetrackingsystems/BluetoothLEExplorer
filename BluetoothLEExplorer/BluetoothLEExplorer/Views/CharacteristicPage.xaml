<Page x:Class="BluetoothLEExplorer.Views.CharacteristicPage"
      xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
      xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
      xmlns:Behaviors="using:Template10.Behaviors"
      xmlns:Core="using:Microsoft.Xaml.Interactions.Core"
      xmlns:Interactivity="using:Microsoft.Xaml.Interactivity"
      xmlns:controls="using:Template10.Controls"
      xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
      xmlns:local="using:BluetoothLEExplorer.Views"
      xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
      xmlns:converters="using:Template10.Converters"
      xmlns:myconverters="using:BluetoothLEExplorer.Services.Converters"
      xmlns:vm="using:BluetoothLEExplorer.ViewModels" x:Name="ThisPage"
      xmlns:models="using:BluetoothLEExplorer.Models" 
      mc:Ignorable="d">

    <Page.DataContext>
        <vm:CharacteristicPageViewModel x:Name="ViewModel" />
       
    </Page.DataContext>

    <Page.Resources>
        <converters:ValueWhenConverter x:Key="VisibleWhenBlankConverter" When="">
            <converters:ValueWhenConverter.Value>
                <Visibility>Collapsed</Visibility>
            </converters:ValueWhenConverter.Value>
            <converters:ValueWhenConverter.Otherwise>
                <Visibility>Visible</Visibility>
            </converters:ValueWhenConverter.Otherwise>
        </converters:ValueWhenConverter>

        <converters:ValueWhenConverter x:Key="VisibleWhenTrueConverter">
            <converters:ValueWhenConverter.When>
                <x:Boolean>True</x:Boolean>
            </converters:ValueWhenConverter.When>
            <converters:ValueWhenConverter.Value>
                <Visibility>Visible</Visibility>
            </converters:ValueWhenConverter.Value>
            <converters:ValueWhenConverter.Otherwise>
                <Visibility>Collapsed</Visibility>
            </converters:ValueWhenConverter.Otherwise>
        </converters:ValueWhenConverter>

        <myconverters:DisplayTypeToBooleanConverter x:Key="DisplayTypeToBooleanConverter" />
        <myconverters:WriteTypeToBooleanConverter x:Key="WriteTypeToBooleanConverter" />


    </Page.Resources>

    <RelativePanel Background="{ThemeResource ApplicationPageBackgroundThemeBrush}">

        <VisualStateManager.VisualStateGroups>
            <VisualStateGroup x:Name="AdaptiveVisualStateGroup">



                <VisualState x:Name="VisualStateNarrow">
                    <VisualState.StateTriggers>
                        <AdaptiveTrigger MinWindowWidth="{StaticResource NarrowMinWidth}" />
                    </VisualState.StateTriggers>
                    <VisualState.Setters>
                        <!--  TODO: change properties for narrow view  -->
                        <Setter Target="DisplayType.(RelativePanel.Below)" Value="ReadAgainButton" />
                        <Setter Target="DisplayType.(RelativePanel.AlignLeftWith)" Value="ReadValueText" />
                        <Setter Target="ReadValueText.(RelativePanel.AlignVerticalCenterWithPanel)" Value="False" />
                        <Setter Target="Value.(FrameworkElement.MaxWidth)" Value="180"/>
                        <Setter Target="radioButton.(ContentControl.Content)" Value="Dec"/>
                        <Setter Target="radioButton.(FrameworkElement.Margin)">
                            <Setter.Value>
                                <Thickness>0,0,-45,0</Thickness>
                            </Setter.Value>
                        </Setter>
                        <Setter Target="radioButton1.(FrameworkElement.Margin)">
                            <Setter.Value>
                                <Thickness>0,0,-45,0</Thickness>
                            </Setter.Value>
                        </Setter>
                        <Setter Target="radioButton2.(FrameworkElement.Margin)">
                            <Setter.Value>
                                <Thickness>0,0,-45,0</Thickness>
                            </Setter.Value>
                        </Setter>
                        <Setter Target="radioButton3.(FrameworkElement.Margin)">
                            <Setter.Value>
                                <Thickness>0,0,-45,0</Thickness>
                            </Setter.Value>
                        </Setter>
                        <Setter Target="ReadAgainButton.(RelativePanel.AlignLeftWithPanel)" Value="True"/>
                        <Setter Target="ReadAgainButton.(RelativePanel.AlignTopWith)" Value=""/>
                        <Setter Target="ReadAgainButton.(RelativePanel.Below)" Value="Value"/>
                        <Setter Target="ReadAgainButton.(FrameworkElement.Width)" Value="300"/>
                        <Setter Target="WriteType.(RelativePanel.Below)" Value="WriteButton"/>
                    </VisualState.Setters>
                </VisualState>

                <VisualState x:Name="VisualStateNormal">
                    <VisualState.StateTriggers>
                        <AdaptiveTrigger MinWindowWidth="{StaticResource NormalMinWidth}" />
                    </VisualState.StateTriggers>
                    <VisualState.Setters>
                        <!--  TODO: change properties for normal view  -->
                        <Setter Target="DisplayType.(RelativePanel.Below)" Value="ReadValueText" />
                        <Setter Target="DisplayType.(RelativePanel.AlignLeftWith)" Value="ReadValueText" />
                        <Setter Target="ReadValueText.(RelativePanel.AlignVerticalCenterWithPanel)" Value="False" />
                        <Setter Target="radioButton.(ContentControl.Content)" Value="Dec"/>
                        <Setter Target="radioButton.(FrameworkElement.Margin)">
                            <Setter.Value>
                                <Thickness>0,0,-45,0</Thickness>
                            </Setter.Value>
                        </Setter>
                        <Setter Target="radioButton1.(FrameworkElement.Margin)">
                            <Setter.Value>
                                <Thickness>0,0,-45,0</Thickness>
                            </Setter.Value>
                        </Setter>
                        <Setter Target="radioButton2.(FrameworkElement.Margin)">
                            <Setter.Value>
                                <Thickness>0,0,-45,0</Thickness>
                            </Setter.Value>
                        </Setter>
                        <Setter Target="radioButton3.(FrameworkElement.Margin)">
                            <Setter.Value>
                                <Thickness>0,0,-45,0</Thickness>
                            </Setter.Value>
                        </Setter>
                        <Setter Target="Value.(FrameworkElement.MaxWidth)" Value="180"/>
                        <Setter Target="ReadAgainButton.(RelativePanel.RightOf)" Value="Value"/>
                        <Setter Target="WriteType.(RelativePanel.Below)" Value="WriteButton"/>
                        <Setter Target="WriteType.(RelativePanel.AlignLeftWithPanel)" Value="True"/>
                    </VisualState.Setters>
                </VisualState>

                <VisualState x:Name="VisualStateDisplayType">
                    <VisualState.StateTriggers>
                        <AdaptiveTrigger MinWindowWidth="{StaticResource MinDisplayTypeWidth}" />
                    </VisualState.StateTriggers>
                    <VisualState.Setters>
                        <!--  TODO: change properties for narrow view  -->
                        <Setter Target="DisplayType.(RelativePanel.RightOf)" Value="" />
                        <Setter Target="DisplayType.(RelativePanel.Below)" Value="Value"/>
                        <Setter Target="DisplayType.(RelativePanel.AlignLeftWithPanel)" Value="True"/>
                        <Setter Target="radioButton.(ContentControl.Content)" Value="Decimal"/>
                        <Setter Target="ReadAgainButton.(RelativePanel.RightOf)" Value="Value"/>
                        <Setter Target="WriteType.(RelativePanel.RightOf)" Value=""/>
                        <Setter Target="WriteType.(RelativePanel.Below)" Value="WriteButton"/>
                        <Setter Target="WriteType.(RelativePanel.AlignLeftWithPanel)" Value="True"/>
                    </VisualState.Setters>

                </VisualState>

                <VisualState x:Name="VisualStateWide">
                    <VisualState.StateTriggers>
                        <AdaptiveTrigger MinWindowWidth="{StaticResource WideMinWidth}" />
                    </VisualState.StateTriggers>
                    <VisualState.Setters>
                        <!--  TODO: change properties for wide view  -->
                        <Setter Target="DisplayType.(RelativePanel.RightOf)" Value="ReadAgainButton" />
                        <Setter Target="ReadAgainButton.(RelativePanel.RightOf)" Value="Value"/>
                        <Setter Target="DisplayType.(RelativePanel.AlignLeftWithPanel)" Value="False"/>
                        <Setter Target="DisplayType.(RelativePanel.Below)" Value=""/>
                        <Setter Target="WriteType.(RelativePanel.RightOf)" Value="WriteButton"/>

                    </VisualState.Setters>
                </VisualState>
            </VisualStateGroup>
        </VisualStateManager.VisualStateGroups>

        <!--  header  -->
        <controls:PageHeader x:Name="pageHeader" Frame="{x:Bind Frame}"
                             RelativePanel.AlignLeftWithPanel="True"
                             RelativePanel.AlignRightWithPanel="True"
                             RelativePanel.AlignTopWithPanel="True" Text="Characteristics Page" />

        <!--  content  -->

        <Grid x:Name="Content" Padding="10" 
              RelativePanel.Below="pageHeader"
              RelativePanel.AlignLeftWithPanel="True"
              RelativePanel.AlignRightWithPanel="True" 
              RelativePanel.AlignBottomWith="Notify">
            <Grid.RowDefinitions>
                <RowDefinition Height="auto" />
                <!-- Row 0 -->
                <RowDefinition Height="auto"/>
                <!-- Row 1 -->
                <RowDefinition Height="auto"/>
                <!-- Row 2 -->
                <RowDefinition Height="auto" />
                <!-- Row 3 -->
                <RowDefinition Height="auto" />
                <!-- Row 4 -->
                <RowDefinition Height="*" />
                <!-- Row 5 -->
            </Grid.RowDefinitions>

            <TextBlock Grid.Row="0"  >
                <Run Text="{x:Bind ViewModel.DeviceName}" />
                <!--
                <Run Text=" - " />
                <Run Text="{x:Bind ViewModel.Characteristic.Parent.Name}" />
                <Run Text=" - " />
                <Run Text="{x:Bind ViewModel.Characteristic.Name}" />
                -->
            </TextBlock>

            <!--<StackPanel Grid.Row="1" Orientation="Horizontal"  >-->




            <RelativePanel Grid.Row="5" VerticalAlignment="Top" Visibility="{x:Bind ViewModel.CharacteristicCanWrite, Converter={StaticResource VisibleWhenTrueConverter}}" Margin="15,452,105,0" Height="99">
                <TextBlock x:Name="WriteValueText" Text="Send Value: " Margin="0,5,5,5" VerticalAlignment="Center" Width="100" />
                
                <TextBox x:Name="WriteValue" Text="{x:Bind ViewModel.ValueToWrite, Mode=TwoWay}" VerticalAlignment="Center" Width="100" Margin="5" 
                         RelativePanel.RightOf="WriteValueText" TextChanging="WriteValue_TextChanging" 
                         />
                <Button x:Name="WriteButton" Content="Send" Click="{x:Bind ViewModel.WriteValue}" Margin="5" RelativePanel.RightOf="WriteValue" />
                <Button x:Name="ConfigButton" Content="Config" Click="{x:Bind ViewModel.WriteConfig}" Margin="5" RelativePanel.RightOf="WriteButton"   />
                <Button x:Name="ClearButton" Content="Clear" Click="Clear_Click" Margin="5" RelativePanel.RightOf="ConfigButton"   />
                <!--
                <TextBlock x:Name="Disconnect" Text ="DISCONNECTED" Margin="5" VerticalAlignment="Center" Width="100" RelativePanel.RightOf="ClearButton" 
                Visibility="{x:Bind Converter={StaticResource VisibleWhenFalseConverter}, Mode=OneWay, Path=ViewModel.IsCon}" />
                -->
                <!-- The radio buttons need to be in different groups because they are all bound to the same property, so it takes care of which ones stays on vs off. If there is no group then the stackpanel container -->
                <!-- groups them and it conflicts with the value converter -->
                <!--
                <StackPanel Name="WriteType" Orientation="Horizontal" Margin="5">
                    <RadioButton x:Name="radioButton4" Content="Decimal" IsChecked="{Binding WriteType, Mode=TwoWay, Converter={StaticResource WriteTypeToBooleanConverter}, ConverterParameter=Decimal }" Width="100" GroupName="e" />
                    <RadioButton x:Name="radioButton5" Content="Hex" IsChecked="{Binding WriteType, Mode=TwoWay, Converter={StaticResource WriteTypeToBooleanConverter}, ConverterParameter=Hex }" Width="100" GroupName="f" Checked="radioButton5_Checked" Unchecked="radioButton5_Unchecked" />
                    <RadioButton x:Name="radioButton6" Content="UTF8" IsChecked="{Binding WriteType, Mode=TwoWay, Converter={StaticResource WriteTypeToBooleanConverter}, ConverterParameter=UTF8 }" Width="100" GroupName="g" />
                </StackPanel>
                -->
            </RelativePanel>


            <StackPanel Grid.Row="5" Margin="25,541,95,-76">
                <StackPanel Orientation="Horizontal" HorizontalAlignment="Left" Visibility="{x:Bind ViewModel.CharacteristicCanNotify, Converter={StaticResource VisibleWhenTrueConverter}}">
                    <!--
                    <ToggleSwitch x:Name="NotifySwitch" Header="Notify" 
                        OffContent="Off" OnContent="On" IsOn="{x:Bind Mode=TwoWay, Path=ViewModel.Notify}" />
                    <ProgressRing Visibility="{x:Bind Converter={StaticResource VisibleWhenTrueConverter}, Mode=OneWay, Path=ViewModel.NotifyProgress}" 
                        IsActive="{x:Bind Mode=OneWay, Path=ViewModel.NotifyProgress}" />
                    <TextBlock Text="Error setting notification" Foreground="Red" 
                        Margin="-60, 30, 0, 0"
                        Visibility="{x:Bind Converter={StaticResource VisibleWhenTrueConverter}, Mode=OneWay, Path=ViewModel.NotifyError}" />
                    -->
                </StackPanel>
                <!--<StackPanel Orientation="Horizontal" HorizontalAlignment="Left" Visibility="{x:Bind ViewModel.CharacteristicCanIndicate, Converter={StaticResource VisibleWhenTrueConverter}}">
                    <ToggleSwitch x:Name="IndicateSwitch" Header="Indicate" 
                        OffContent="Off" OnContent="On" IsOn="{x:Bind ViewModel.Indicate, Mode=TwoWay}"/>
                    <ProgressRing Visibility="{x:Bind ViewModel.IndicateProgress, Mode=OneWay, Converter={StaticResource VisibleWhenTrueConverter}}" 
                        IsActive="{x:Bind ViewModel.NotifyProgress, Mode=OneWay}"/>
                    <TextBlock x:Name="IndicateError" Text="Error setting notification" Foreground="Red"
                        Margin="-60, 30, 0, 0"
                        Visibility="{x:Bind ViewModel.IndicateError, Mode=OneWay, Converter={StaticResource VisibleWhenTrueConverter}}" />
                </StackPanel>-->
            </StackPanel>


            <RelativePanel VerticalAlignment="Top" Visibility="{x:Bind Converter={StaticResource VisibleWhenTrueConverter}, Path=ViewModel.CharacteristicValueVisible}" Margin="35,41,85,0" Grid.Row="5" Height="381" >
                <!--<TextBlock x:Name="ReadValueText" Text="Read Value: " Width="100" Height="32"/>-->
                <ScrollViewer Name="_scrollViewer" VerticalScrollBarVisibility="Auto"  VerticalAnchorRatio="1">
                    <TextBox Name ="_console" Text="{ x:Bind Mode=OneWay, Path=ViewModel.Characteristic.Value}" TextWrapping="Wrap" Height="Auto" Width="520"/>
                    
                </ScrollViewer>
                <!--
                <Border x:Name="Value" Background="LightGray" RelativePanel.RightOf="ReadValueText" RelativePanel.AlignVerticalCenterWith="ReadValueText" MinWidth="75" Height="196" Width="354" >
                    <TextBlock Text="{x:Bind Mode=OneWay, Path=ViewModel.Characteristic.Value}"  Margin="5,7,-475,91" TextWrapping="WrapWholeWords"/>
                </Border>-->


                <!-- The radio buttons need to be in different groups because they are all bound to the same property, so it takes care of which ones stays on vs off. If there is no group then the stackpanel container -->
                <!-- groups them and it conflicts with the value converter -->
                <!--
                    <StackPanel Name="DisplayType" Orientation="Horizontal" Margin="5" >
                        <RadioButton x:Name="radioButton" Content="Decimal" IsChecked="{Binding Characteristic.DisplayType, Mode=TwoWay, Converter={StaticResource DisplayTypeToBooleanConverter}, ConverterParameter=Decimal }" Width="100" GroupName="a"/>
                        <RadioButton x:Name="radioButton1" Content="Hex" IsChecked="{Binding Characteristic.DisplayType, Mode=TwoWay, Converter={StaticResource DisplayTypeToBooleanConverter}, ConverterParameter=Hex }" Width="100" GroupName="b"/>
                        <RadioButton x:Name="radioButton2" Content="UTF8" IsChecked="{Binding Characteristic.DisplayType, Mode=TwoWay, Converter={StaticResource DisplayTypeToBooleanConverter}, ConverterParameter=UTF8 }" Width="100" GroupName="c"/>
                        <RadioButton x:Name="radioButton3" Content="UTF16" IsChecked="{Binding Characteristic.DisplayType, Mode=TwoWay, Converter={StaticResource DisplayTypeToBooleanConverter}, ConverterParameter=UTF16 }" Width="100" GroupName="d"/>
                    </StackPanel>
                    -->
            </RelativePanel>
            
        </Grid>

        <RelativePanel x:Name="Notify" Background="LightBlue" Height="60"
                    RelativePanel.AlignLeftWithPanel="True" 
                    RelativePanel.AlignRightWithPanel="True"
                    RelativePanel.AlignBottomWithPanel="True">

            <ScrollViewer Padding="10,0,0,0"
                    RelativePanel.AlignLeftWithPanel="True"
                    RelativePanel.AlignTopWithPanel="True"
                    RelativePanel.AlignRightWithPanel="True"
                    RelativePanel.AlignBottomWithPanel="True">

                <ItemsControl Padding="10,0,10,0"  ItemsSource="{x:Bind ViewModel.NotifyUser}" />
            </ScrollViewer>
        </RelativePanel>
    </RelativePanel>
</Page>

